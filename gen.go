// +build ignore

// This program generates list.go. It can be invoked by running
// go generate

package main

import (
	"bufio"
	"bytes"
	"compress/zlib"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/globalsign/publicsuffix"
)

func main() {
	var listRetriever publicsuffix.GitHubListRetriever

	var latestTag, err = listRetriever.GetLatestReleaseTag()
	if err != nil {
		fmt.Printf("error while retrieving last commit information: %s", err.Error())
		os.Exit(1)
	}

	var rawList io.Reader
	rawList, err = listRetriever.GetList(latestTag)
	if err != nil {
		fmt.Printf("error while retrieving Public Suffix List latest release: %s", err.Error())
		os.Exit(1)
	}

	var file *os.File
	file, err = os.Create("list.go")
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}

	if err = printFile(file, rawList, latestTag); err != nil {
		fmt.Printf("error while generating code: %s", err.Error())
		os.Exit(1)
	}
}

func printFile(w io.Writer, r io.Reader, release string) error {
	fmt.Fprintf(w, "// Code generated by go run gen.go; DO NOT EDIT\n\n")
	fmt.Fprintf(w, "package publicsuffix\n\nvar initialRelease = `%s`\n\n", release)

	var listBuffer bytes.Buffer
	var scanner = bufio.NewScanner(r)

	for scanner.Scan() {
		var line = strings.TrimSpace(scanner.Text())

		// Skip empty lines and comment lines except for the ones marking the ICANN domains
		if line == "" || (strings.HasPrefix(line, "//") &&
			!strings.Contains(line, publicsuffix.ICANNBegin) && !strings.Contains(line, publicsuffix.ICANNEnd)) {
			continue
		}

		listBuffer.WriteString(line + "\n")
	}

	// Compression zlib
	var zlibBuffer bytes.Buffer
	var zlibWriter = zlib.NewWriter(&zlibBuffer)
	zlibWriter.Write(listBuffer.Bytes())
	zlibWriter.Close()

	fmt.Fprintf(w, "var listBytes = []byte{")

	for _, b := range zlibBuffer.Bytes() {
		fmt.Fprintf(w, "%#X,", b)
	}

	fmt.Fprintf(w, "}\n")

	return nil
}
