// +build ignore

/*
Copyright 2018 GMO GlobalSign Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This program generates list.go. It can be invoked by running
// go generate

package main

import (
	"bytes"
	"fmt"
	"os"

	"github.com/globalsign/publicsuffix"
)

func main() {
	publicsuffix.Update()

	var rules bytes.Buffer
	if err := publicsuffix.Write(&rules); err != nil {
		fmt.Printf("error while encoding the rules: %s\n", err.Error())
		os.Exit(1)
	}

	if err := printFile(rules); err != nil {
		fmt.Printf("error while generating code: %s\n", err.Error())
		os.Exit(1)
	}
}

func printFile(rules bytes.Buffer) error {
	var file, err = os.Create("list.go")
	if err != nil {
		return err
	}

	fmt.Fprintf(file, "// Code generated by publicsuffix/gen.go; DO NOT EDIT\n\n")
	fmt.Fprintf(file, "package publicsuffix\n\nvar initialRelease = `%s`\n\n", publicsuffix.Release())
	fmt.Fprintf(file, "var listBytes = []byte{")

	for _, b := range rules.Bytes() {
		fmt.Fprintf(file, "%#X,", b)
	}

	fmt.Fprintf(file, "}\n")

	return nil
}
